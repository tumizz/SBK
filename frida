-------------------------------------------------------Frida 관련 문서-----------------------------------------------------------
  프리다 공식홈페이지
 https://frida.re/docs/android/
 
 프리다 코드 공유사이트
 https://codeshare.frida.re/browse
 
 
 https://github.com/smudr/android-ssl-pinning
 
 하울 프리다 사용법
 https://www.hahwul.com/2017/08/hacking-frida-hooking-to-multi-platform.html
 
 프리다 서버
 https://github.com/frida/frida/releases
 
 JAVA API 공식 
 https://docs.oracle.com/en/java/javase/14/docs/api/index.html
 
 OWASP에서 제공하는 샘플파일
 https://github.com/OWASP/owasp-mstg
 
 Appmon
 https://github.com/dpnishant/appmon
 
  리눅스 open 함수
 man7.org/linux/main-pages/man2/open.2.html
 
 frida javascript API
 www.frida.re/docs/javascript-api
 
 - IOS 후킹 관련 사이트

https://scent2d.tistory.com/86 // 후킹 코드 예시가 잘 돼 있음

https://j-a-l.tistory.com/6 // 후킹한 결과를 text 파일로 저장할 수 있는 부분이 정리되어 있음

frida -U -f "kr.co.show.cs.full" -l C:\Users\ssw\Desktop\hookingjs\hooking.js > C:\Users\ssw\Desktop\Result1.txt 2>&1

https://github.com/rubaljain/frida-jb-bypass // 클래스에 해당하는 메소드 이름을 출력할 수 있는 예시 코드가 있음.. $methods

http://egloos.zum.com/playgame/v/2232039 // onEnter, onLeave에 대한 설명이 잘 정리되어 있음

- frida-ps로 패키지명 출력하는 방법

frida-ps -Uai


- frida-trace 관련 사이트

https://cha3m.tistory.com/22 // 단순 사용법 위주 정리

frida-trace -U -f "kr.co.show.cs.full" -m "*[클래스명 메소드명]"

** f 옵션은 spawn 기능과 같아서 옵션 뒤에 명시된 패키지 실행시켜줌

https://thesecurity.tistory.com/1 // hooking 코드 예시에 대한 설명이 자세함


- frida code share 사이트의 메모리에 로딩된 IOS 앱 덤프하는 방법

https://codeshare.frida.re/@lichao890427/dump-ios/

Clutch 같은 앱 바이너리 덤프하기 힘들 때 유용한 방법

1) /private/var/mobile/Containers/Bundle/Application/00000000-0000-0000-0000-000000000000
** 디바이스마다 다르게 표시되어 0으로 표시했습니다.

경로에 있는 .app 이름을 확인하시고

2) frida-server 연결

3) frida --codeshare lichao890427/dump-ios -U -f "앱 패키지 이름"
** 앱 패키지 이름은 frida-ps -Uai 로 조회 가능합니다.

4) %resume 입력 후 Enter

5) dumpModule("OOOOO.app") 입력 후 Enter

6) /var/mobile/Containers/Data/Application/966641F6-1508-4337-AE49-32C8C5EAA5FF/Library/Caches/OOOOO.decrypted 0x3dc000 경로에 .decrypted 확장자로 저장됩니다.

7) FTP 연결하셔서 복호화된 바이너리 파일 빼오시면 IDA에서 메모리에 로딩되는 클래스, 메소드 이름 확인하실 수 있습니다.


- 탐지 소스 관련 정보

https://www.cnblogs.com/lichao890427/articles/10849390.html

https://wrkholic84.github.io/Frida-for-iOS/

https://m.blog.naver.com/PostView.nhn?blogId=best798&logNo=221658122932&proxyReferer=https%3A%2F%2Fwww.google.com%2F

https://hyunmini.tistory.com/112

http://blog.naver.com/PostView.nhn?blogId=best798&logNo=221466857195&parentCategoryNo=18&categoryNo=&viewDate=&isShowPopularPosts=true&from=search

https://trelis24.github.io/2019/08/09/Frida-iOS/

https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06c-reverse-engineering-and-tampering
 
---------------------------------------frida 실습-------------------------------------------
 Frida 주요 기능
 - AppMon과 Needle 등의 도구에서 프리다를 기반으로 사용
 - 함수 후킹 (특정함수에 연결하여 반환 값 변경, 함수 재작성 등)
 - 애플리케이션 디버깅 가능
 - 힙 메모리 내 객체 인스턴스 검색 및 사용
 - 실시간 트래픽 스니핑 또는 암호 해독
 - 탈옥 또는 루팅되지 않은 단말기에서도 사용 가능
 
 
  ------------------------아나콘다 파이썬 설치-------------------------------------------
 아나콘다 버전
 cmd > conda --version
 >python --version
 
 >conda create -n py3 python=3.7
 >activate py3
 >python --version
 
 >conda create -n py2 python=2.7
 >activate py2
 >python --version
 ------------------------nox 설치-------------------------------------------
 >nox_adb shell
 #getprop ro.product.cpu.abi
 >nox_adb devices
 >nox_adb -s 127.0.0.1:62001 shell
 
  ------------------------Frida 환경 구축-------------------------------------------
  >activate py3
 >pip install frida-tools
 >frida --version //12.8.20 앱과 PC에 동일한 서버버전을 설치해야됨
  
  
 frida server 옮김
 >nox_adb push C:\Users\POKER\Desktop\앱취약점진단\frida\frida-server-12.6.11-android-x86\frida-server-12.6.11-android-x86 /data/local/tmp
 #cd /data/local/tmp
 #./frida 탭버튼 &
 #ps | grep frida
 
 >activate py3
 >frida-ps -U
 
 * 프리다 명령어
 - frida -h
 도움말
 
 - frida
 프리다 CLI인 REPL인터페이스로, 신속한 프로토타이핑과 손쉬운 디버깅이 목표인 도구
 
 - frida-ps
 프리다에 연결된 프로세스 목록을 출력하기 위한 도구
 
 - frida-ls-devices
 연결된 디바이스를 출력하는 도구
 
 - frida-trace
 함수 호출을 동적으로 추적하기 위한 도구
 
 - frida-kill
 프로세스를 종료하는 도구 
 
 -------------------------------frida 실습--------------------------------
 
 >frida -U com.android.chrome //연결되면 Tab버튼 누르면 명령어 사용할 수 있음
 
 >frida -U com.android.chrome -l chrome.js //스크립트 실행
 
 >frida-ls-devices -h
 >frida-trace -h
 >frida-ps -h //도움말
 >frida-kill -U [PID] //frida kill

 >nox_adb devices
 >frida-ps -D 127.0.0.1:62001 //디바이스에 실행중인 프로세스 나열
 안될경우
 >tasklist, netstat -aon | findstr //nox일 경우 VMhandle PID 찾기
 

 
 ###open.js 소스
 onEnter: function (log, args, state) {
   log('open(' + 'pathname=' + Memory.readUtf8String(args[0]) + ', flags=' + args[1] + ')');
 },
 
 onLeave: function (log, retval, state) {
    }
 }
 
 >frida-ps -Ua //실행중인 Appl목록만 출력됨
 >frida-trace -i "open" -U com.android.chrome //해당앱에 대해 open 함수 모니터링

프로세스 중지
 >frida-kill -h
 >frida-kill -U [PID] //프로세스 종료

####frida 루팅 우회 후킹 스크립트##########################
console.log("[*] Starting Script");
Java.perform(function() {
    bClass = Java.use("com.android.kt.b");
    bClass.onClick.implementation = function(v) {
         console.log("[*] onClick called");
    }
    console.log("[*] onClick handler modified");
}
########################################################### 

*******프리다 기본 문법*******
 Java.perform(fn)
 Java.use(className)
 Java.enumerateLoadedClasses(callbacks)
 Java.choose(className, callbacks)
 setImmediate(fn)
 Overloading
 
1.  Java.perform(fn)
 - 현재 스레드가 가상머신에 연결되어 있는지 확인하고 fn을 호출 
 Java.perform(function() {
 
 }
 
2. Java.use(className)
 - Java.use()는 변수와 메소드에 액세스 할 수 있는 클래스 객체를 반환 //Java.choose를 사용해야함
 - 메소드 구현을 변경하려면 새로운 메소드로 덮어 써야 함
 - 주의! 인스턴스를 반환하는 것이 아닌 클래스 객체를 반환함
 
 - 앱에서 사용하는 클래스와 연동되는 myClass를 정의
 - .implementation : 앱에서 정의된 메소드의 구현 내용을 재작성

################source Code######################

Java.perform(function() {
     var myClass = Java.use(com.mypackage.name.class)
     myClass.myMethod.implementation = function(param)
     {
     }
}
 
2-1. Java.choose(className, callbacks)
 - 힙에서 인스턴스화 된 객체 찾기 가능
 - callbacks : onMatch, onComplete
 - onMatch : 실시간으로 인스턴스에 대해 호출
 - onComplete : function()의 모든 인스턴스가 열거될 때 호출
 
#######################source Code#################

Java.perform(function()
 {
   Java.choose(com.mypackage.name.class,
   {
   "onMatch" : function(instance){
     console.log(instance.toString())
     },
   "onComplete":function() {}
   })
 })
 
4. Java.enumerateLoadedClasses(callbacks)
 - 로드된 모든 클래스를 열거하고 모든 일치 항목을 출력
  -- onMatch : 일치하는 것을 찾으면 호출
  -- onComplete : 가능한 일치(Match)를 모두 마치면 사용됨

###################Source Code########################
Java.perform(function()
{
   Java.enumerateLoadedClasses(
   {
       "onMatch" : function(className) {
           console.log(className)
       }, 
       "onComplete":function() {}
   })
})

5. setimmediate(fn)
 - Process terminated 오류 해결하기 // 에뮬레이터가 느려질때 시간초과되어 연결자동 종료되는 경우가 있어서 setimmediate()함수로 포장함

########################Source Code##############
setImmediate(function() {//prevent timeout
   console.log("[*] Starting script");
   
   Java.perform(function() {
      myClass = Java.use("com.package.name.class.name");
      myClass.implementation = function(v) {
        // do sth.
   }
})})


6. Overloading
 메소드 구현을 재작성할 때 유의! 다형성(?)!!
  만약 다음과 같이 세 가지의 경우는 어떻게 처리할까? overload() 제공
   1) 입력받는 인수가 없는 메소드
   2) 두 개의 바이트 배열을 인수로 입력 받는 메소드
   3) 앱의 context와 Boolean 형태의 인수로 입력받는 메소드

######################Source Code#####################
myClass.myMethod.overload().implementation = function() {
    //do sth
}

myClass.myMethod.overload("[B", "[B").implementation = function(param1, param2){
    //do sth
}

myClass.myMethod.overload("android.context.Context", "boolean").implementation = function(param1, param2) {
    //do sth
}


* overload() 매개변수 카테고리
 .overload()
 .overload('int')
 .overload('boolean')
 .overload('float')
 .overload('[B')
 .overload('[B', '[B', '[B')
 .overload('java.io.File')
 .overload('java.lang.String')
 .overload('android.view.View')
 .overload('android.app.Activity')
 .overload('android.content.Context')
 .overload('android.content.Context', 'java.lang.String')
 .overload('java.lang.String', 'java.lang.String')
 .overload('android.graphics.Bitmap')
 .overload('java.util.List')
 .overload('android.content.Context', 'java.lang.String', 'java.lang.String')
 .overload('android.app.Activity', 'int', 'int', 'int', 'boolean')
 
 
 ----------------------------------------------Javascript 파일  ----------------------------------------
 
프로세스에 스크립트를 인젝션하기 위한 사전 작업
1. 애플리케이션 프로세스 실행 후 자바스크립트 삽입
>activate py3

>frida-ps -Ua
>frida -U com.android.chrome //chrome 프로세스에 attach


2. 애플리케이션 프로세스 시작되기 전 자바스크립트 삽입
>frida-kill -U com.android.chrome

>frida-ps -Ua

>frida -U -f com.android.chrome //f 옵션 : 프로세스가 메인스레드 시작되기전상태를 다룰 수있음
com.android.chrome]-> %resume //chrome 메인쓰레드 시작 
>frida -U --no-pause -f com.android.chrome //자동으로 메인쓰레드 시작

>frida-kill -U PID //chrome 프로세스 종료

>frida -U --no-pause -f com.android.chrome -l hooking.js //메인쓰레드가 시작되기 전에 javascript code가 삽입되고 나서 메인쓰레드 시작됨

com.android.chrome]->Java.androidVersion //javascript version 확인
com.android.chrome]->Java.perform(function(){
Java.enumerateLoadedClasses({"onMatch":function(className){console.log(className)},"onComplete":function(){}})}) //Class 목록 출력


(py3)>frida -U -l class_print.js com.android.chrome //javascript code 실행 방법

* Android 구조
onCreate()
onStart() <- onRestart()
onResume()
Activity running
onPause()
onStop()          ^ 
onDestroy() ->    i

구글 검색 : android developers onresume //Activity는 Android.app.Activity 클래스에 
* onResume() 후킹 함수 작성


* 프리다 스크립트 파일 사용하기
힙에서 인스턴스화 된 android.view.View 객체 찾기
 - 애플리케이션에서 눈에 보이는 이미지, 버튼 등을 가리킴
 
######################Source Code###########################
setImmediate(function(){
	Java.perform(function(){
		Java.choose("android.view.View", {
			"onMatch" : function(instance){
				console.log("[*] Instance found");
			},
			"onComplete" : function(){
				console.log("[*] Finished heap search");
			}
		})
	})
})

>frida -U -l instance_chrome.js com.android.chrome

객체 = 구현해야될 대상, 자동차
클래스 =객체를 구현해야될 설계도, 자동차 설계도 
인스턴스 = 설계도를 따라서 소프트웨어에서 구현된 실체, 아우디

 ----------------------------------------------파이썬 바인딩----------------------------------------
* 프리다로 작업을 자동화 하기
 - 파이썬 코드 실행으로 아래와 같은 기능이 가능함
 1. 프로세스 식별하고 연결
 2. 연결된 디바이스에서 구현하려는 프로세스와 세션 연결
 3. 자바스크립트로 작성된 페이로드 자동 삽입

예제)
import frida

jscode = """payload_code"""

session = frida.get_usb_device().attach("com.your.package.name")
script = session.create_script(jscode)
script.load()
sys.stdin.read()

* 파이썬 바인딩 기본 구조
1)
#frida, sys 모듈 가져오기
import frida, sys

# 삽입할 자바스크립트 코드 넣기
jscode="""payload_code"""

#frida를 시작하고 USB장치에서 com.your.package.name 프로세스 연결
session = frida.get_usb_device().attach("com.your.package.name")

#jscode에 있는 스크립트 코드를 frida에서 사용할 수 있도록 생성
script = session.create_script(jscode)

#생성한 script를 로드
script.load()

#script가 동작하기 전에 종료되는 문제 예방
sys.stdin.read()


2)
# frida를 시작하고 USB장치에 연결
device = frida.get_usb_device()

# 연결된 USB 장치에서 com.your.package.name 프로세스 생성
pid = device.spawn(["com.your.package.name"])

# com.your.package.name 프로세스 연결
session = device.attach(pid)

#jscode에 있는 스크립트 코드를 frida에서 사용할 수 있도록 생성
script = session.create_script(jscode)

#생성한 script를 로드
script.load()

# com.package.name 프로세스 메인 스레드 실행
device.resume(pid)

#script가 동작하기 전에 종료되는 문제 예방
sys.stdin.read()


* 파이썬 바인딩 파일 만들기
 - android.app.Activity 클래스의 onResume 함수 덮어쓰기
[onresume.py]
import frida, sys

jscode="""
console.log("[*] Starting onResume script");
Java.perform(function(){
  var Activity = Java.use("android.app.Activity")
   Activity.onResume.implementation = function(){
      console.log("[*] onResume() got called!"); 
      this.onResume();
   };
});
"""
session = frida.get_usb_device().attach("com.android.chrome")
script = session.create_script(jscode)
script.load()
sys.stdin.read()

>python onresume.py

* 메시지 처리하기
 send(message[,data])
  - 프리다 기반 애플리케이션에 자바스크립트 객체 message 전송
 
 script.on('message', on_message)
  - 프리다 스크립트에서 보낸 메시지를 처리할 콜백 함수를 설정
  - 호출할 핸들러를 등록하는 과정
  
 on_message(message, data)
  - script.on('message', on_message)에서 등록한 핸들러에 대한 정의를 하는 부분
  - 단순히 message 매개변수를 콘솔에 출력하는 역할
  
[메시지 처리하기 예제]
onresume.py
import frida, sys

def on_message(message, data):
    if message['type'] == 'send':
        print(message['payload'])
    else:
        print(message)

jscode = """
setImmediate(function(){
	Java.perform(function(){
		var Activity=Java.use("android.app.Activity")
		Activity.onResume.implementation = function(){
			send("[*] onResume() got called!");
			this.onResume();
		};
	});
});
"""
session = frida.get_usb_device().attach("package.name")
script = session.create_script(jscode)
script.on('message', on_message)
script.load()
sys.stdin.read()


----------------------------------------------프리다 챌린지 연습----------------------------------------
>frida -U -l fridalab.js uk.rossmarks.fridalab

FridaLab
http://rossmarks.uk/blog/fridalab

01. Change class challenge_01's variable 'chall01' to 1 //클래스 challenge_01의 변수 chall01을 1로 변경하기
02. Run chall02() //Chall02() 메소드 실행하기
03. Make chall03() return true //chall03() 메소드가 true 반환하게 만들기
04. Send "frida" to chall04() //chall04() 메소드에 frida 문자열 전송하기
05. Always send "frida" to chall05() //chall05() 메소드에 frida 문자열 항상 전송하기
06. Run chall06() after 10 seconds with correct value //올바른 값으로 10초 후 chall06() 메소드 실행하기
07. Bruteforce check07Pin() then confirm with chall07() //chall07Pin() 메소드를 브루트포스해서 chall07() 메소드로 확인하기
08.Change 'check' button's text value to 'Confirm' //check 버튼의 텍스트를 Confirm으로 변경하기 


* 1. 클래스 challenge_01의 변수 chall01을 1로 변경하기

setImmediate(function() {
	Java.perform(function(){
		//Challenge 01
		var chall_01 = Java.use("uk.rossmarks.fridalab.challenge_01")
		chall_01.chall01.value = 1; //value는 속성이라는 뜻 js에서 객체내부의 속성
		console.log("\nSolved Challenge 01");
	})
})


2. Chall02() 메소드 실행하기
 - static method면 Java.use 사용, instance method면 Java.choose 사용하면 됨
 
setImmediate(function() {
	Java.perform(function(){
		//Challenge 02
		//instance 메소드는 Java.choose를 사용해야함
		Java.choose("uk.rossmarks.fridalab.MainActivity", {
			onMatch : function(chall_02){
				chall_02.chall02();
			},
			onComplete : function(){
			console.log("\nSolved Challenge 02");
			}
		})
	})
})

3. chall03() 메소드가 true 반환하게 만들기

//Challenge 03
		var chall_03 = Java.use("uk.rossmarks.fridalab.MainActivity");
		chall_03.chall03.implementation = function(){
			console.log("\nSolved Challenge 03");
			return true;



4. chall04() 메소드에 frida 문자열 전송하기
//Challenge 04
		Java.choose("uk.rossmarks.fridalab.MainActivity",{
			onMatch : function(chall_04){
				console.log("\nfrida string send");
				chall_04.chall04("frida");
			},
			onComplete : function(){
				console.log("\nSolved Challenge 04");
			}
		})

5. chall05() 메소드에 frida 문자열 항상 전송하기
//Challenge 05
		var chall_05 = Java.use("uk.rossmarks.fridalab.MainActivity");
		chall_05.chall05.overload("java.lang.String").implementation = 
		 function(arg){
			 this.chall05("frida");
			 console.log("\nSolved Challenge 05");
		 }

6. 올바른 값으로 10초 후 chall06() 메소드 실행하기
 - setTimeout(fn, delay) //몇초 후 함수 실행 
 
 
setTimeout(function(){
	console.log("10sec Challenge 06!");
	setImmediate(function() {
		Java.perform(function(){
			var chall_06 = Java.use("uk.rossmarks.fridalab.challenge_06");
			chall_06.addChall06.overload("int").implementation = function(arg){
				Java.choose("uk.rossmarks.fridalab.MainActivity", {
					onMatch : function(instance) {
						instance.chall06(chall_06.chall06.value);
				},
				onComplete : function(){
					console.log("Solved Challenge 06");
					}
				})
			}
		})
	})
}, 10000);


7. chall07Pin() 메소드를 브루트포스해서 chall07() 메소드로 확인하기

//Challenge 07
		 var chall_07 = Java.use("uk.rossmarks.fridalab.challenge_07");
		 Java.choose("uk.rossmarks.fridalab.MainActivity",{
			 onMatch : function(instance){
				 for(var i=9999; i>=1000; i--){
					 var boanproject = String(i);
					 console.log("chall07 random : "+boanproject);
					if(chall_07.check07Pin(boanproject)){
						console.log("random! : "+boanproject);
						instance.chall07(boanproject);
						break;
					}
				 }
			},
			 onComplete : function(){
				 console.log("\nSolved Challenge 07");
			}
		 })

8. check 버튼의 텍스트를 Confirm으로 변경하기 
 //Challenge 08
		 var klass = Java.use("android.widget.Button");
		 Java.choose("uk.rossmarks.fridalab.MainActivity",{
			onMatch : function(instance){
				var checkid = instance.findViewById(2131165231);
				var check = Java.cast(checkid, klass);
				var string = Java.use("java.lang.String");
				check.setText(string.$new("Confirm")); //$new : 인스턴스화 
				console.log("Challenge 08");
			},
			onComplete : function(){
				console.log("\nSolved Challenge 08");
			}
		})
		
----------------------------------------------프리다 우회코드 ----------------------------------------		

>frida -U --no-pause -l Uncrackable1.js -f owasp.mstg.uncrackable1

* 루팅 우회

System.exit(0); // java.lang.System에서 불러오는 종료 메소드

setImmediate(function(){
	Java.perform(function(){
		var exit_bypass = Java.use("java.lang.System");
		exit_bypass.exit.implementation = function(arg){
			console.log("[*] Exit Bypass");
		}
	})
})


* 암호 복호화
/* 함수 리턴값을 트루로 바꿔서 점프
		var trueClass = Java.use("sg.vantagepoint.uncrackable1.a");
		trueClass.a.implementation = function(arg){
			console.log("\n[*] True");
			return true;
		}
		*/아래는 비밀번호 복호화 방법
		var decrypteClass = Java.use("sg.vantagepoint.a.a");
		decrypteClass.a.implementation = function(arg1, arg2){
			var secret_string = this.a(arg1, arg2);
			var secret_S = ''
			for(var i=0; i<secret_string.length; i++){
				secret_S += String.fromCharCode(secret_string[i])
				//String.fromCharCode() ascii코드를 문자로 반환
			}
			console.log("[*] Decrypted : " +secret_S);
			return secret_string;
		}

* 로그인 우회

setImmediate(function(){
	Java.perform(function(){
		var loginBypass = Java.use("com.mwr.example.sieve.MainLoginActivity");
		loginBypass.checkKeyResult.implementation = function(arg){
			console.log("[*] Success Login Bypass");
			this.checkKeyResult(true);
		}
	})
})


* 브루트포스 PIN번호 공격
	
		function padToFour(number){
			if(number<=9999){
				number = ("000"+number).slice(-4); //0001 0002 000333-> 0333
				return String(number);
			}
		}
		
		
		var pinBypass = Java.use("com.mwr.example.sieve.ShortLoginActivity");
		pinBypass.submit.implementation = function(arg){
			var service = this.serviceConnection.value;
			for(var i=0; i<9999; i++){
				service.checkPin(padToFour(i));
				console.log(padToFour(i));
			}
		}	

----------------------------------------------SSL Pinning 우회----------------------------------------	

https://github.com/smudr/android-ssl-pinning



























































 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
